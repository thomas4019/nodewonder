{
    "name": "viewPage",
    "args": [
        "path",
        "vars",
        "scope",
        "callback",
        "error_callback"
    ],
    "code": {
        "_is_func": true,
        "args": [
            "path",
            "vars",
            "scope",
            "callback",
            "error_callback"
        ],
        "javascript": "if (path == '') {\n    path = 'index'\n}\ncms.functions.loadPageState(path, function(err, page) {\n    if (err) {\n        if (path.lastIndexOf('/', path.length - 3) === -1 || path == '/%') {\n            error_callback();\n        } else {\n            var last = path.substring(path.length - 2);\n            var count = path.split('/').length - 1;\n            var end = path.length;\n            if (last == '/%') {\n                count--;\n                end -= 2;\n            }\n            var index = path.lastIndexOf('/', end - 1);\n\n            var arg = path.substring(index + 1, end);\n            vars['arg' + count] = arg;\n            path = path.substring(0, index + 1) + '%';\n            //console.log(vars);\n            //console.log(last);\n            //console.log('searching: ' + path);\n            cms.functions.viewPage(path, vars, scope, callback, error_callback);\n        }\n        return;\n    }\n\n    if (page.arguments) {\n        _.each(page.arguments, function(input, id) {\n            _.each(input, function(arg, name) {\n                vars[id + '-' + name] = vars['arg' + arg];\n                //console.log(id + '-' + name + '=' + vars['arg' + arg]);\n            });\n        });\n    }\n\n    page.scope = scope;\n    page.scope['args'] = vars;\n\n    if (page.controller && page.controller.length > 0) {\n        //eval(page.controller);\n        var i = 0;\n        context['widgets'] = page.code.widgets;\n        context['slotAssignments'] = page.code.slotAssignments;\n        context['scope'] = page.scope;\n        context['args'] = vars;\n        context['callback'] = function() {\n            i++;\n            if (i == page.controller.length) {\n                callback(page, vars);\n            } else {\n                vm.runInContext(page.controller[i], context);\n            }\n        }\n        vm.runInContext(page.controller[0], context);\n        //console.log(util.inspect(context));\n        page.scope = context.scope;\n    } else {\n        callback(page, vars);\n    }\n\n});"
    }
}