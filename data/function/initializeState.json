{
    "name": "initializeState",
    "args": [
        "state",
        "scope",
        "user",
        "callback"
    ],
    "code": {
        "_is_func": true,
        "args": [
            "state",
            "scope",
            "user",
            "callback"
        ],
        "javascript": "var widgets_buffer = {};\nvar count = 1;\nvar results = {\n    deps: {},\n    head: [],\n    head_map: {},\n    script: '',\n    style: '',\n    perf: {\n        start: process.hrtime(),\n        load_start: {},\n        load_end: {},\n        children_start: {},\n        children_end: {},\n        init_start: {},\n        init_end: {},\n        render_start: {},\n        render_end: {}\n    }\n};\n\nvar initializeWidget = function(w, id) {\n    var name = w.type;\n\n    if (!cms.widgets[name]) {\n        console.error('Missing widget:' + name + ' ' + id);\n        name = 'echo';\n    }\n\n    cms.widgets[name].settings_unfiltered = cms.widgets[name].settings_unfiltered || [];\n    if (_.contains(cms.widgets[name].tags, 'field_edit')) {\n        if (cms.widgets[name].settings_unfiltered.indexOf('data') == -1) {\n            cms.widgets[name].settings_unfiltered.push('data');\n        }\n    }\n\n    if (!(_.contains(cms.widgets[name].tags, 'local-action')) ||\n        _.contains(cms.widgets[name].tags, 'filtered')) {\n        cms.functions.fillSettings(w.settings, scope, cms.widgets[name].settings_unfiltered);\n    }\n\n    results.perf.init_start[id] = process.hrtime(results.perf.start)[1];\n\n    w.settings = w.settings || {};\n    var widget = cms.functions.newWidget(name, w.settings, id);\n    widget.settings = w.settings;\n    widget.id = id;\n    widget.user = user;\n\n    results.perf.init_end[id] = process.hrtime(results.perf.start)[1];\n\n    widget.slotAssignments = {};\n\n    if (widget.children) {\n        count++;\n        results.perf.children_start[id] = process.hrtime(results.perf.start)[1];\n        widget.children(function(children, slotAssignments) {\n            results.perf.children_end[id] = process.hrtime(results.perf.start)[1];\n            if (slotAssignments) {\n                w.slots = {};\n                _.each(slotAssignments, function(ids, slot) {\n                    w.slots[slot] = _.map(ids, function(_id) {\n                        return id + '-' + _id;\n                    });\n                })\n            }\n            _.each(children, function(widgetStateList, slot) {\n                var heirarchical = false;\n                _.each(widgetStateList, function(widgetInput, idC) {\n                    var nameC = widgetInput.type;\n                    idC = id + '-' + idC;\n\n                    if (!slotAssignments) {\n                        w.slots = w.slots || {};\n                        w.slots[slot] = w.slots[slot] || [];\n                        w.slots[slot].push(idC);\n                    }\n\n                    state[idC] = widgetInput;\n\n                    _.each(widgetInput.slots, function(ids, slot) {\n                        widgetInput.slots[slot] = _.map(ids, function(_id) {\n                            return id + '-' + _id;\n                        });\n                    })\n\n                    initializeWidget(widgetInput, idC);\n                });\n            });\n            count--;\n            part2();\n        });\n    }\n\n    widgets_buffer[id] = widget;\n    return widget;\n}\n\n//initialize each widget\n_.each(state, function(w, key) {\n    initializeWidget(w, key)\n});\n\ncount--;\npart2();\n\nfunction part2() {\n    if (count != 0)\n        return;\n\n    //console.log(state);\n\n    //connect the children to the parents\n    _.each(state, function(w, id) {\n        var widget = widgets_buffer[id];\n\n        if (w.slots) {\n            addChildrenToWidget(w.slots, widget);\n        }\n    });\n\n    _.each(widgets_buffer, function(widget, id) {\n        if (widget.deps) {\n            dextend(results.deps, cms.functions.retrieve(widget.deps));\n        }\n        if (widget.script) {\n            var script = widget.safeRetrieve('script', '');\n            results.script += '\\n' + script;\n        }\n        if (widget.style) {\n            var style = widget.safeRetrieve('script', '');\n            results.style += '\\n' + style;\n        }\n    });\n\n    callback(widgets_buffer, results, state);\n}\n\nfunction addChildrenToWidget(slots, widget) {\n    _.each(slots, function(widgetList, slot) {\n        if (!widget.slotAssignments[slot]) {\n            widget.slotAssignments[slot] = [];\n        }\n        _.each(widgetList, function(sub_id, i) {\n            var sub = widgets_buffer[sub_id];\n            if (typeof sub !== 'undefined') {\n                widget.slotAssignments[slot].push(sub);\n                sub.parent = widget;\n            } else {\n                console.error('Invalid widget reference:' + sub_id);\n            }\n        });\n    });\n}"
    }
}