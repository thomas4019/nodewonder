{
    "name": "field_multi",
    "settingsModel": [
        {
            "name": "",
            "type": "",
            "quantity": "",
            "settings": "",
            "required": false
        }
    ],
    "settings_unfiltered": [],
    "htmlTemplate": {
        "_is_func": true,
        "args": [],
        "htmlmixed": "{{{label}}}\n<input type=\"hidden\" name=\"{{id}}\" value=\"new {{#if map}}Object{{else}}Array{{/if}}\" />{{{ renderSlot \"body\" }}}"
    },
    "deps": {},
    "head": [],
    "tags": [
        "view"
    ],
    "slots": [],
    "slot_tags": {},
    "setup": {
        "_is_func": true,
        "args": [],
        "javascript": "this.w_input = deep.clone(this.settings);\n\n//console.log(this.w_input);\n\nthis.settings.quantity = this.settings.quantity || '';\nvar re = /([a-zA-Z_-]*)([0-9]*)-?([0-9]*)(\\+?):?(.*)/g;\n// 1=key, 2=min, 3=max, 4=add, 5=remainder\ntokens = re.exec(this.settings.quantity);\n//console.log(tokens);\n\nthis.can_add = false;\nthis.map = false;\nif (tokens[1]) {\n  this.map = tokens[1];\n  this.w_input.map = tokens[1];\n}\nthis.w_input.quantity = tokens[5];\nthis.w_type = 'key_value';\n\nthis.w_input.widget = this.settings.widget; this.w_input.kvwidget = this.settings.kvwidget = cms.functions.getWidget(this.w_input.widget, this.w_input);\n    \nvar ndata = [];\n_.each(this.settings.data, function(value, key) {\n    ndata.push({\n        key: key,\n        value: value\n    });\n});\nthis.settings.data = ndata;\n\nif (tokens[4]) {\n    this.can_add = true;\n}\nthis.settings.quantity = tokens[2];\n\ndelete this.w_input['label'];\nthis.w_input['inline'] = 'multi';"
    },
    "children": {
        "_is_func": true,
        "args": [
            "callback"
        ],
        "javascript": "var state = {\n    \"body\": {}\n};\n\nif (this.can_add) {\n    state[\"body\"][\"add\"] = {\n        \"type\": \"button\",\n        \"slots\": {\n            \"events\": [\"onclick\"]\n        }\n    }\n    state[\"body\"][\"add\"][\"settings\"] = {\n        \"button_type\": \"primary\",\n        \"label\": \"Add more items\"\n    }\n}\n\nthis.count = (this.settings.data && Array.isArray(this.settings.data)) ? this.settings.data.length : this.settings.quantity;\n\nif (this.count == 0) {\n    this.count = this.settings.quantity;\n}\nif (this.count == '') {\n    this.count = 3;\n}\n\ndelete this.w_input['data'];\n\nfor (var i = 0; i < this.count; i++) {\n    state[\"body\"][\"\" + (i)] = {};\n    state[\"body\"][\"\" + (i)]['type'] = this.w_type;\n    state[\"body\"][\"\" + (i)]['settings'] = deep.clone(this.w_input);\n    if (this.settings.data && this.settings.data[i])\n        state[\"body\"][\"\" + i]['settings']['data'] = this.settings.data[i];\n    else if (!this.map)\n      state[\"body\"][\"\" + i]['settings']['data'] = {key: i};\n}\n\nstate[\"body\"][\"onclick\"] = {\n    \"type\": \"onclick\",\n    \"slots\": {\n        \"actions\": [\"add_action\"]\n    }\n}\nstate[\"body\"][\"add_action\"] = {\n    \"type\": \"execute\",\n    \"settings\": {\n      \"js\": \"d = \" + JSON.stringify(this.w_input) + \"; \" + (this.map ? \"\" : \"d['data'] = {key: (nw.counter['\" + this.id + \"'])}; \") +  \"nw.functions.insertWidgetBefore('\" + this.w_type + \"','\" + \n      this.id + \"-'+(nw.counter['\" + this.id + \"']++), JSON.stringify(d), '#\" + this.id + \"-add')\"\n    },\n}\ncallback(state);"
    },
    "processData": {
        "_is_func": true,
        "args": [
            "data",
            "old",
            "user"
        ],
        "javascript": "var widget = cms.functions.newWidget(this.w_type, this.settings);\nold = old || {};\nvar out;\n\nif (this.map) {\n    out = {};\n} else {\n    out = [];\n}\n\n//console.log('!!!!!!');\n//console.log(data);\nfor (key in data) {\n  var processed = widget.processData(data[key], old[key], user);\n  //console.log('-------' + this.w_type);\n  //console.log(processed);\n  if ( (processed.key || processed.key === 0) && processed.value) {\n    out[processed.key] = processed.value;\n    delete processed['key'];\n  }\n}\n\nreturn out;"
    },
    "wrapper": "",
    "wrapperClass": "",
    "script": {
        "_is_func": true,
        "args": [],
        "javascript": "return 'nw.counter[\"' + this.id + '\"] = ' + (this.count) + ';';"
    },
    "weight": null
}