{
    "name": "widget_selector",
    "settings_unfiltered": [],
    "toHTML": {
        "_is_func": true,
        "args": [
            "label"
        ],
        "javascript": "return '<input type=\"hidden\" class=\"widget-selector\">';"
    },
    "deps": {
        "select2": [],
        "lodash": []
    },
    "head": {
        "_is_func": true,
        "args": [],
        "_func_override": true,
        "javascript": "var widgets = {};\n_.each(cms.widgets, function(w, name) {\n    widgets[w.name] = {\n        id: w.name,\n        text: w.name,\n        name: w.name,\n        widget: w.name,\n        tags: w.tags,\n        settings: w.settings && w.settings.display && Object.keys(w.settings.display.widgets).length > 0,\n        slots: cms.functions.retrieve(w.slots, []),\n    };\n    /*if (_.contains(w.tags,'view')) {\n        widgets[w.name].slots.push('events');\n        widgets[w.name].slot_tags['events'] = ['event'];\n      }*/\n    if (_.contains(w.tags, 'event')) {\n        widgets[w.name].slots['actions'] = ['action'];\n    }\n    if (w.pseudo_names) {\n        var widget = widgets[w.name];\n        var names = cms.functions.retrieve(w.pseudo_names, []);\n        _.each(names, function(pseudo_name) {\n            widgets[pseudo_name] = deep.clone(widget);\n            widgets[pseudo_name].text = pseudo_name;\n            widgets[pseudo_name].name = name;\n            widgets[pseudo_name].widget = name;\n            widgets[pseudo_name].id = pseudo_name;\n            widgets[pseudo_name].settings = w.settingsModel(pseudo_name);\n        });\n    }\n});\n\nvar funcs = {\n  '+': {args: ['a', 'b']},\n  '-': {args: ['a', 'b']},\n  '*': {args: ['a', 'b']},\n  '/': {args: ['num', 'dividend']},\n  '%': {args: ['num', 'dividend']},\n  'or': {args: ['a', 'b']},\n  'not': {args: ['expression']},\n  'and': {args: ['a', 'b']},\n  '[]': {args: ['array', 'index']},\n  '.': {args: ['object', 'key']},\n  'typeof': {args: ['var']},\n  'parseInt': {args: ['string']},\n  'parseFloat': {args: ['string']},\n  'function': {args: ['args', 'code']},\n  'while': {args: ['cond', 'do']},\n  'loop': {args: ['while', 'do']},\n};\n// empty values?\n// literals?\n// number special values\n// number methods\n// Math\n// date stuff, moment?\n// array methods, push, pop, delete, sort, etc\n// comparision operators\n\n_.forIn(_, function(f, name) {\n  if (f) {\n    funcs['_.' + name] = {\n      'args': cms.getFuncArgs(f)\n    };\n  }\n});\n\n/*_.forIn(string(''), function(f, name) {\n  if (f) {\n    var args = cms.getFuncArgs(f);\n    args.unshift('string')\n    funcs['string.' + name] = {\n      'args': args,\n      'prefix': 'string(',\n      'index': 1,\n      'join': ').',\n      'suffix': '().s'\n    };\n  }\n});*/\n\n_.forIn(cms.functions, function(f, name) {\n  if (f) {\n    funcs['cms.functions.' + name] = {\n      'args': cms.getFuncArgs(f)\n    };\n  }\n});\n\n/*_.each(stringMethods, function(name, args) {\n  funcs['[String].' + name] = {\n    'args': args,\n    'infix': 1,\n  };\n});*/\n\n_.forIn(stringjs, function(f, name) {\n  funcs['stringjs.' + name] = {\n    'args': f.args,\n  };\n});\n\n\n\nmethods = [\n      'quote', 'substring', 'toLowerCase', 'toUpperCase', 'charAt',\n      'charCodeAt', 'indexOf', 'lastIndexOf', 'startsWith', 'endsWith',\n      'trim', 'trimLeft', 'trimRight', 'toLocaleLowerCase',\n      'toLocaleUpperCase', 'localeCompare', 'match', 'search',\n      'replace', 'split', 'substr', 'concat', 'slice'\n    ];\n\nreturn ['<scr' + 'ipt type=\"text/javascript\">nw.widgets=' + JSON.stringify(widgets) + ';</scr' + 'ipt>',\n       '<scr' + 'ipt type=\"text/javascript\">nw.funcs=' + JSON.stringify(funcs) + ';</scr' + 'ipt>'];"
    },
    "tags": [
        "view"
    ],
    "slots": {},
    "wrapper": "",
    "wrapperClass": "",
    "script": {
        "_is_func": true,
        "args": [],
        "javascript": "return 'setupWidgetSelector(\"#' + this.id + ' .widget-selector\");';"
    },
    "weight": "",
    "content": {
        "fields": {},
        "display": {
            "widgets": {},
            "slotAssignments": {
                "body": []
            }
        }
    },
    "settings": {
        "fields": {},
        "display": {
            "widgets": {},
            "slotAssignments": {
                "body": []
            }
        }
    }
}